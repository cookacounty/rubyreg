module <%= $options[:modulename] %>(
	// Main clock, enable, and reset
	input              rst_l,
	input              clk,
	input              enable,
	input              sw_rst,

	// Register control
	input              reg_wr,
	input        [7:0] reg_rd_addr_a,
	input        [7:0] reg_rd_addr_b,
	input        [7:0] reg_wr_addr,
	input        [7:0] reg_wdat,
	input        [7:0] reg_mask,
	output reg   [7:0] reg_rdat_a,
	output reg   [7:0] reg_rdat_b
	<% get_inputs.each do |input| %>
	,<%= input %><% end %>
	<% get_outputs("port").each do |output| %>
	,<%= output %><% end %>
	<% get_registers("port").each do |reg| %>
	,<%= reg %><% end %>


);

// Read Decode A
always @(*) begin
	reg_rdat_a = 0;
	case(reg_rd_addr_a) <% @rm.registers.each do |reg| %>
		<%=reg.addr%>: begin <% get_read_mux(reg).each do |addr_deco|%>
			reg_rdat_a<%=addr_deco%>;<% end %>
		end<% end %>
		default: begin
			reg_rdat_a = 0;
		end
	endcase
end

// Read Decode B
always @(*) begin
	reg_rdat_b = 0;
	case(reg_rd_addr_b) <% @rm.registers.each do |reg| %>
		<%=reg.addr%>: begin <% get_read_mux(reg).each do |addr_deco|%>
			reg_rdat_b<%=addr_deco%>;<% end %>
		end<% end %>
		default: begin
			reg_rdat_b = 0;
		end
	endcase
end

// Address write decode logic
<% get_address_en.each do |addr| %>
<%= addr %>;<% end %>

// Raw register logic
<% get_registers("wire").each do |reg| %>
<%= reg %>;<% end %>

// Field next state logic
<% get_outputs("wire").each do |reg| %>
<%= reg %>;<% end %>

// Registers
always@(posedge clk or negedge rst_l) begin
	if (!rst_l) begin <% get_outputs("reset").each do |reg| %>
		<%= reg %>;	<% end %>
	end else if (enable) begin<% get_outputs("active").each do |reg| %>
		<%= reg %>;	<% end %>
	end
end

endmodule
